// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	model "api-kontrakan/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HouseRepositoryImplementation is an autogenerated mock type for the HouseRepositoryImplementation type
type HouseRepositoryImplementation struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, house
func (_m *HouseRepositoryImplementation) Create(ctx context.Context, house *model.HouseModel) error {
	ret := _m.Called(ctx, house)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.HouseModel) error); ok {
		r0 = rf(ctx, house)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, id
func (_m *HouseRepositoryImplementation) FindById(ctx context.Context, id uint) (*model.HouseModel, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.HouseModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*model.HouseModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *model.HouseModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HouseModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHouseRepositoryImplementation interface {
	mock.TestingT
	Cleanup(func())
}

// NewHouseRepositoryImplementation creates a new instance of HouseRepositoryImplementation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHouseRepositoryImplementation(t mockConstructorTestingTNewHouseRepositoryImplementation) *HouseRepositoryImplementation {
	mock := &HouseRepositoryImplementation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
